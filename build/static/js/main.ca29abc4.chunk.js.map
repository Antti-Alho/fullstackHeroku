{"version":3,"sources":["components/search.js","services/personService.js","components/personFrom.js","components/notification.js","components/person.js","components/numbers.js","App.js","serviceWorker.js","index.js"],"names":["Search","filterString","setFilter","value","onChange","event","target","baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","PersonForm","persons","setPersons","setMessage","setErrorStatus","useState","newName","setNewName","newNumber","setNewNumber","create","console","log","ps","name","number","refresh","catch","error","update","window","confirm","person","find","onSubmit","preventDefault","filter","length","type","Notification","message","Style","color","errorStatus","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","className","Person","key","onClick","deleteFunction","Numbers","personsToShow","setPersonsToShow","useEffect","toLowerCase","includes","map","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca29abc4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Search = ({ filterString, setFilter}) => {\r\n\r\n  const HandleFilterChange = (event) => setFilter(event.target.value)\r\n\r\n  return (\r\n    <div>\r\n      <h2>Search</h2>\r\n      <form>\r\n        <div>search:\r\n          <input\r\n            value={filterString}\r\n            onChange={HandleFilterChange}\r\n          />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Search\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAllPersons = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst createPerson = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updatePerson = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAllPersons,\r\n  createPerson,\r\n  deletePerson,\r\n  updatePerson\r\n}","import React, { useState } from 'react'\r\nimport ps from '../services/personService'\r\n\r\nconst PersonForm = ({ persons, setPersons, setMessage, setErrorStatus}) => {\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const handleNameChange = (event) => setNewName(event.target.value)\r\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    persons.filter(person => person.name === newName).length === 0\r\n      ? create()\r\n      : update()\r\n  }\r\n\r\n  const create = () => {\r\n    console.log('asd')\r\n    ps.createPerson({ name: newName, number: newNumber })\r\n      .then( () => {\r\n        refresh() \r\n        setMessage(`${newName} created`) \r\n        setErrorStatus(false) \r\n      })\r\n      .catch( error => {\r\n        setMessage(`Failed to create new person ${newName} ${error}`) \r\n        setErrorStatus(true) \r\n      })\r\n  }\r\n\r\n  const update = () => {\r\n    if (window.confirm(`${newName} is already in the phonebook, replace the old number with ne one ?`)){\r\n      const person = persons.find(person => person.name === newName)\r\n      ps.updatePerson(person.id, { name: newName, number: newNumber })\r\n        .then( () => { \r\n          refresh()\r\n          setMessage(`${newName} number changed to ${newNumber}`)\r\n          setErrorStatus(false) \r\n        })\r\n        .catch( error => {\r\n          setMessage(`Failed to edit person ${newName} ${error}`)\r\n          setErrorStatus(true)\r\n        })\r\n    }\r\n  }\r\n\r\n  const refresh = () => {\r\n    ps.getAllPersons()\r\n    .then( data => setPersons(data) )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add / Edit</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          name:\r\n          <input\r\n            value={newName}\r\n            onChange={handleNameChange}\r\n          />\r\n        </div>\r\n        <div>number:\r\n          <input\r\n            value={newNumber}\r\n            onChange={handleNumberChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message, errorStatus }) => {\r\n\r\n  const Style = {\r\n    color: errorStatus ? 'red' : 'green',\r\n    background: 'lightgrey',\r\n    fontSize: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  }\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div style={Style} className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\nimport ps from '../services/personService'\r\n\r\nconst Person = ({ person, setPersons, setMessage, setErrorStatus }) => {\r\n\r\n  const deleteFunction = (person) => {\r\n    if (window.confirm(`Delete ${person.name}`)){\r\n      ps.deletePerson(person.id)\r\n        .then(() => {\r\n          ps.getAllPersons()\r\n          .then( data => {\r\n            setPersons(data)\r\n          })\r\n          setMessage(`${person.name} deleted`)\r\n          setErrorStatus(false)\r\n        })\r\n        .catch( error => { \r\n          setMessage(`Failed to delete ${person.name} ${error}`)\r\n          setErrorStatus(true)\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <p>\r\n      {person.name} {person.number}\r\n      <button key={person.id} onClick={() => deleteFunction(person)}>delete</button>\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default Person;","import React, {useState, useEffect} from 'react'\r\nimport Person from './person'\r\n\r\nconst Numbers = ({ persons, setPersons, filterString, setMessage, setErrorStatus  }) => {\r\n\r\n  const [personsToShow, setPersonsToShow] = useState([])\r\n\r\n  useEffect( () => {\r\n    console.log(persons)\r\n    setPersonsToShow(persons.filter( person =>\r\n      person.name.toLowerCase().includes(filterString.toLowerCase())\r\n    ))\r\n  }, [filterString, persons] )\r\n\r\n  return (\r\n    <div>\r\n      <h2>Numbers</h2>\r\n      <ul>\r\n        {personsToShow.map((person) =>\r\n          <Person \r\n            key={person.id}\r\n            person={person}\r\n            setPersons={setPersons}\r\n            setMessage={setMessage}\r\n            setErrorStatus={setErrorStatus}\r\n          />\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Numbers\r\n","import React, { useState, useEffect }from 'react'\r\nimport Search from './components/search'\r\nimport PersonForm from './components/personFrom'\r\nimport Notification from './components/notification'\r\nimport Numbers from './components/numbers'\r\nimport ps from './services/personService'\r\n\r\nconst App = () => {\r\n  const [filterString, setFilter] = useState('')\r\n  const [persons, setPersons] = useState([])\r\n  const [errorStatus, setErrorStatus] = useState(false)\r\n  const [message, setMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    ps.getAllPersons().then( data => {\r\n      setPersons(data)\r\n      console.log(data)\r\n    })\r\n  },[] )\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification \r\n        message={message}\r\n        errorStatus={errorStatus}\r\n      />\r\n      <Search\r\n        filterString={filterString}\r\n        setFilter={setFilter}\r\n      />\r\n      <PersonForm\r\n        persons={persons}\r\n        setPersons={setPersons}\r\n        setMessage={setMessage}\r\n        setErrorStatus={setErrorStatus}\r\n      />\r\n      <Numbers\r\n        persons={persons}\r\n        setPersons={setPersons}\r\n        filterString={filterString}\r\n        setMessage={setMessage}\r\n        setErrorStatus={setErrorStatus}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}